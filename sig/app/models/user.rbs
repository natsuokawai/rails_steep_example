class User < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[User, User::ActiveRecord_Relation]

  attr_accessor id (): Integer
  def id_changed?: () -> bool
  def id_change: () -> [Integer?, Integer?]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor name (): String?
  def name_changed?: () -> bool
  def name_change: () -> [String?, String?]
  def name_will_change!: () -> void
  def name_was: () -> String?
  def name_previously_changed?: () -> bool
  def name_previous_change: () -> Array[String?]?
  def name_previously_was: () -> String?
  def restore_name!: () -> void
  def clear_name_change: () -> void

  attr_accessor age (): Integer?
  def age_changed?: () -> bool
  def age_change: () -> [Integer?, Integer?]
  def age_will_change!: () -> void
  def age_was: () -> Integer?
  def age_previously_changed?: () -> bool
  def age_previous_change: () -> Array[Integer?]?
  def age_previously_was: () -> Integer?
  def restore_age!: () -> void
  def clear_age_change: () -> void

  attr_accessor created_at (): Time
  def created_at_changed?: () -> bool
  def created_at_change: () -> [Time?, Time?]
  def created_at_will_change!: () -> void
  def created_at_was: () -> Time?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[Time?]?
  def created_at_previously_was: () -> Time?
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at (): Time
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [Time?, Time?]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> Time?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[Time?]?
  def updated_at_previously_was: () -> Time?
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor admin (): (TrueClass | FalseClass)?
  def admin_changed?: () -> bool
  def admin_change: () -> [(TrueClass | FalseClass)?, (TrueClass | FalseClass)?]
  def admin_will_change!: () -> void
  def admin_was: () -> (TrueClass | FalseClass)?
  def admin_previously_changed?: () -> bool
  def admin_previous_change: () -> Array[(TrueClass | FalseClass)?]?
  def admin_previously_was: () -> (TrueClass | FalseClass)?
  def restore_admin!: () -> void
  def clear_admin_change: () -> void
  attr_accessor admin? (): TrueClass | FalseClass

  def books: () -> Book::ActiveRecord_Associations_CollectionProxy




  def self.admin: () -> User::ActiveRecord_Relation
end

class User::ActiveRecord_Relation < ActiveRecord::Relation
  include _ActiveRecord_Relation[User]
  include Enumerable[User, self]

  def admin: () -> User::ActiveRecord_Relation
end

class User::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
end
